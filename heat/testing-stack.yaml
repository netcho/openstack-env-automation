---
heat_template_version: 2021-04-16
description: Deploys an OpenStack Development environment with StorPool
parameters:
  access_network:
    type: string
    label: Access Network
    description: Name or UUID of a existing network to use for accessing the provisioned instances.
    constraints:
      - custom_constraint: neutron.network
  storpool_image:
    type: string
    label: Storage Image
    description: Name or UUID of existing image to provision the storage instance from.
    constraints:
      - custom_constraint: glance.image
  openstack_image:
    type: string
    label: OpenStack Image
    description: Name or UUID of existing image to provision the controller and compute instances from.
    constraints:
      - custom_constraint: glance.image
  awx_webhook_url:
    type: string
    label: AWX Webhook URL
    description: URL of Webhook of AWX to call
  awx_webhook_secret:
    type: string
    label: AWX Webhook Secret
    description: Secret to verify the caller of the Webhook
resources:
  storpool_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        users:
          - default
          - name: awx
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
            ssh_authorized_keys:
              - { get_file: https://vault.storpool.com/support-key.pub }
              - { get_file: https://vault.storpool.com/awx-key.pub }
        write_files:
          - path: /run/awx_payload.json
            content:
              str_replace:
                template: |
                  {"stack_uuid": "stack_id", "storpool_network_name": "storage_network_name"}
                params:
                  stack_id: { get_param: OS::stack_id }
                  storage_network_name: { get_attr: [storage_network, name] }
        runcmd:
          - str_replace:
              template: "curl -H 'X-Gitlab-Token: gitlab_token' -H 'Content-Type: application/json' -d @/run/awx_payload.json -X POST gitlab_url"
              params:
                gitlab_url: { get_param: awx_webhook_url }
                gitlab_token: { get_param: awx_webhook_secret }
  openstack_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        users:
          - default
          - name: awx
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
            ssh_authorized_keys:
              - { get_file: https://vault.storpool.com/support-key.pub }
              - { get_file: https://vault.storpool.com/awx-key.pub }
  storpool_data_disk:
    type: OS::Cinder::Volume
    properties:
      name:
        str_replace:
          template: stack-name-storpool-data-disk
          params:
            stack-name: { get_param: OS::stack_name }
      size: 400
  storage_network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: stack-name-storage-network
          params:
            stack-name: { get_param: OS::stack_name }
      port_security_enabled: False
  iscsi_path1_network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: stack-name-iscsi-path1-network
          params:
            stack-name: { get_param: OS::stack_name }
      port_security_enabled: False
  iscsi_path2_network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: stack-name-iscsi-path2-network
          params:
            stack-name: { get_param: OS::stack_name }
      port_security_enabled: False
  storage_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: storage_network }
      cidr: 192.168.100.0/24
      allocation_pools:
        - start: 192.168.100.1
          end: 192.168.100.63
      gateway_ip: ""
      host_routes:
        - destination: 192.168.101.0/24
          nexthop: 192.168.100.254
    depends_on: storage_network
  iscsi_path1_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: iscsi_path1_network }
      cidr: 192.168.101.0/24
      allocation_pools:
        - start: 192.168.101.1
          end: 192.168.101.199
      gateway_ip: ""
    depends_on: iscsi_path1_network
  iscsi_path2_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: iscsi_path2_network }
      cidr: 192.168.102.0/24
      allocation_pools:
        - start: 192.168.102.1
          end: 192.168.102.199
      gateway_ip: ""
    depends_on: iscsi_path2_network
  storage_iscsi_path1_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: iscsi_path1_network }
      no_fixed_ips: True
      name:
        str_replace:
          template: stack-name-storage-node-iscsi-path1
          params:
            stack-name: { get_param: OS::stack_name }
    depends_on: iscsi_path1_network
  storage_iscsi_path2_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: iscsi_path2_network }
      no_fixed_ips: True
      name:
        str_replace:
          template: stack-name-storage-node-iscsi-path1
          params:
            stack-name: { get_param: OS::stack_name }
    depends_on: iscsi_path2_network
  remote_access_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: stack-name-remote-access
          params:
            stack-name: { get_param: OS::stack_name }
      rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
  controller_services_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: stack-name-controller
          params:
            stack-name: { get_param: OS::stack_name }
      rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 5000
          port_range_max: 9696
  storage_access_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: access_network }
      security_groups:
        - default
        - { get_resource: remote_access_security_group }
  controller_access_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: access_network }
      security_groups:
        - default
        - { get_resource: remote_access_security_group }
        - { get_resource: controller_services_security_group }
  block_compute_access_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: access_network }
      security_groups:
        - default
        - { get_resource: remote_access_security_group }
  storage_instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.xlarge
      name:
        str_replace:
          template: stack-name-storage-node
          params:
            stack-name: { get_param: OS::stack_name }
      networks:
        - port: { get_resource: storage_access_port }
        - subnet: { get_resource: storage_subnet }
        - subnet: { get_resource: iscsi_path1_subnet }
        - subnet: { get_resource: iscsi_path2_subnet }
        - port: { get_resource: storage_iscsi_path1_port }
        - port: { get_resource: storage_iscsi_path2_port }
      block_device_mapping_v2:
        - image: { get_param: storpool_image }
          volume_size: 80
          delete_on_termination: True
        - volume_id: { get_resource: storpool_data_disk }
          boot_index: -1
          delete_on_termination: True
      user_data_format: RAW
      user_data: { get_resource: storpool_cloud_config }
      metadata:
        os_dev_stack_uuid: { get_param: OS::stack_id }
        os_dev_stack_role: storage
    depends_on: [ storage_subnet, iscsi_path1_subnet, iscsi_path2_subnet, storage_iscsi_path1_port, storage_iscsi_path2_port, storage_access_port, storpool_data_disk ]
  controller_instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.2xlarge
      name:
        str_replace:
          template: stack-name-os-controller
          params:
            stack-name: { get_param: OS::stack_name }
      networks:
        - port: { get_resource: controller_access_port }
        - subnet: { get_resource: storage_subnet }
        - subnet: { get_resource: iscsi_path1_subnet }
        - subnet: { get_resource: iscsi_path2_subnet }
      block_device_mapping_v2:
        - image: { get_param: openstack_image }
          volume_size: 80
          delete_on_termination: True
      user_data_format: RAW
      user_data: { get_resource: openstack_cloud_config }
      metadata:
        os_dev_stack_uuid: { get_param: OS::stack_id }
        os_dev_stack_role: controller
    depends_on: [ iscsi_path1_subnet, iscsi_path2_subnet, storage_subnet, controller_access_port ]
  block_compute_instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.large
      name:
        str_replace:
          template: stack-name-block-compute
          params:
            stack-name: { get_param: OS::stack_name }
      networks:
        - port: { get_resource: block_compute_access_port }
        - subnet: { get_resource: storage_subnet }
      block_device_mapping_v2:
        - image: { get_param: openstack_image }
          volume_size: 80
          delete_on_termination: True
      user_data_format: RAW
      user_data: { get_resource: openstack_cloud_config }
      metadata:
        os_dev_stack_uuid: { get_param: OS::stack_id }
        os_dev_stack_role: [ block_compute, block_compute_access_port ]
    depends_on: storage_subnet
